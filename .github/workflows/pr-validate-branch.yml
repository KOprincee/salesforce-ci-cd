name: Validate the changes made in the Pull Request.

# Definition when the workflow should run
on:
    pull_request:
      types: [opened, synchronize]
      paths:
        - 'force-app/**'

# Jobs to be executed
jobs:
    validate-changes-on-QA-org:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
                      
            # Checkout the source code
            # - name: 'Checking out the Code to deploy in Target Org'
            #   uses: actions/checkout@v3
            #   with:
            #       fetch-depth: 0

            # Install Node JS and related dependencies so that it can be able to read the build.xml for TestCases
            - name: 'Installing Node.js for SFDX CLI'
              uses: actions/setup-node@v4
              with:
                node-version: 21

            - name: 'Installing dependencies to Parse TestCases'
              run: npm install xml2js

            # Installing java as it is required for Salesforce Scanner
            - name: 'Installing Java for SFDX Scanner'
              uses: actions/setup-java@v2
              with:
                distribution: 'adopt'
                java-version: '11'

            # Installing SFDX CLI and SFDX Scanner
            - name: 'Installing SFDX CLI and Scanner'
              run: |
                  npm install sfdx-cli
                  npx sfdx plugins:install @salesforce/sfdx-scanner

            # Static Code Analysis
            - name: 'Static Code Analysis In Progress - Report findings as comments on PR'
              uses: mitchspano/sfdx-scan-pull-request@v0.1.7
              with:
                severity-threshold: 1
                pmdconfig: custom-pmd.xml
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            # Installing SFDX GIT Delta plugin
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | npx sfdx plugins:install sfdx-git-delta
                  npx sfdx plugins            

            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir modified-files
                  npx sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output modified-files/ --generate-delta --source force-app/

            # Store secret for target Org.
            - name: 'Populate auth file with SFDX_URL secret of the QA'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_INTEGRATION_URL }} > ./SFDX_INTEGRATION_URL.txt

            # Authenticate to org
            - name: 'Authenticate to Integration Org'
              run: npx sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a QA

            - name: 'Parse TestCases present in build.xml'
              run: |
                  node parse.js              
                  TESTS=$(cat ApexTests.txt)       
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV

            - name: 'Deploy delta changes - Only metadata'
              if: ${{ env.APEX_TESTS == '' }}
              run: |
                  npx sfdx force:source:deploy -x modified-files/package/package.xml --postdestructivechanges modified-files/destructiveChanges/destructiveChanges.xml

            - name: 'Deploy delta changes - Code Changes'
              if: ${{ env.APEX_TESTS != '' }}
              run: |
                  npx sfdx force:source:deploy --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} -x modified-files/package/package.xml --postdestructivechanges modified-files/destructiveChanges/destructiveChanges.xml
              
            # Check if we have TestClasses to be ran.
            - name: 'Run Apex Test Classes - If Any'
              if: ${{ env.APEX_TESTS != '' }}
              run: |
                  mkdir testResuts
                  npx sfdx force:apex:test:run --class-names ${{ env.APEX_TESTS }} --code-coverage --synchronous --outputdir ./testResults

            # Get the Code Coverage for the Above Test Clases
            - name: 'Get the Code Coverage for Each of the Class'
              if: ${{ env.APEX_TESTS != '' && success() }}
              run: |
                  node qualityGateCheck.js

            - uses: actions/github-script@v6
              if: ${{ env.APEX_TESTS != '' && success() }}
              with: 
                  script: |
                      const fs = require('fs');
                      const qc = fs.readFileSync('./testResults/codeCoverageReadableFile.txt','utf8').toString();
                      let COMMENTS = '';
                      if(qc == 'true'){
                          COMMENTS = 'All Classes have Code Coverage of more than 85%. All things are in place to merge the PR.';
                      }else{
                          COMMENTS = qc;
                      }
                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: COMMENTS
                      });

            #Fail the PR if the Code Coverage is Less than 85
            - name: 'If the Code Coverage for any class is > 85% Exit'
              if: ${{ env.APEX_TESTS != '' }}
              run: |
                  if grep -qvx 'true' ./testResults/codeCoverageReadableFile.txt; then
                      exit 1
                  else
                      echo "All Classes have Code Coverage of more than 85%"
                  fi
